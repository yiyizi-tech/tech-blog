generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  content     String?
  excerpt     String?
  tags        String   @default("[]")
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  views       Int      @default(0)
  readingTime Int      @default(0)
  author      String?
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("posts")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MediaFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimetype     String
  size         Int
  url          String   @unique
  alt          String?
  description  String?
  uploadedBy   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("media_files")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    String
  email     String
  website   String?
  postId    Int
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Page {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String?
  published Boolean  @default(false)
  template  String   @default("default")
  author    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pages")
}
